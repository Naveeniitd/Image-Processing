import cv2import numpy as npimport matplotlib.pyplot as pltdef nearest_neigbor(img, size):    img_size = img.shape[0]    ratio_scaled = img_size/size    resize_image_n = np.zeros((size, size), dtype=img.dtype)    for i in range(size):        for j in range(size):            indxR = int(i*ratio_scaled)            indxC = int(j*ratio_scaled)                resize_image_n[i,j] = img[indxR, indxC]    return resize_image_n     def bilinear_inter(img, size):    img = img.astype(np.float32)    img_size = img.shape[0]    ratio_scaled = img_size/size    resize_image_b = np.zeros((size, size), dtype=img.dtype)    for i in range(size):        for j in range(size):            indxR = i*ratio_scaled            indxC = j*ratio_scaled                t_left = img[int(np.floor(indxR)), int(np.floor(indxC))]            t_right = img[int(np.floor(indxR)), min(int(np.floor(indxC)) + 1, img_size - 1)]            b_left = img[min(int(np.floor(indxR)) + 1, img_size - 1), int(np.floor(indxC))]            b_right = img[min(int(np.floor(indxR)) + 1, img_size - 1), min(int(np.floor(indxC)) + 1, img_size - 1)]            diff_x = indxR - int(np.floor(indxR))            diff_y = indxC - int(np.floor(indxC))            t = t_left + (t_right - t_left) * diff_y            b = b_left + (b_right - b_left) * diff_y            p = t + (b - t) * diff_x            resize_image_b[i, j] = p    resize_image_b = np.clip(resize_image_b, 0, 255).astype(np.uint8)    return resize_image_b     img = cv2.imread("cse-logo.png", -1)leo = cv2.imread("leo.png", 0)print(leo.shape)ht, edge = np.histogram(img, bins = 256, range=(0,256))M = max(leo.shape[0], leo.shape[1])size = int(0.25*M)plt.figure(figsize=(10, 6))plt.suptitle("Max = 255", fontsize=16)plt.plot(edge[0:-1], ht, color='black')  plt.title("Histogram of Pixel Intensities")plt.xlabel("Pixel Intensity")plt.ylabel("Frequency")plt.grid(True)plt.savefig("Part1_Histogram_Pixel_Intensity.png")plt.show()r = edge[np.argmax(ht)]print(r)t = 5alpha = np.where(np.abs(img - r) <= t, 255, 0).astype(np.uint8)cv2.imwrite('part1(a).png', alpha)resize_image_n = nearest_neigbor(alpha, size)resize_image_b = bilinear_inter(alpha, size)cv2.imwrite('part1(b_n).png', resize_image_n)cv2.imwrite('part1(b_b).png', resize_image_b)plt.figure(figsize=(10, 5))plt.suptitle("Size = 0.25*max(M,N) = 256", fontsize=16)plt.subplot(1, 2, 1)plt.imshow(resize_image_n,cmap='gray')plt.title("Nearest Neighbor")plt.axis('on')  # Hide the axesplt.subplot(1, 2, 2)plt.imshow(resize_image_b, cmap='gray')plt.title("Bilinear Interpolation")plt.axis('on')  # Hide the axesplt.savefig('Part1_Resized_Cse-log.png')plt.show()# Save or display the alpha imagelogo_image_n = leo.copy()logo_image_b = leo.copy()for i in range(leo.shape[0]-size-1, leo.shape[0]-1):    for j in range(size):         if(resize_image_n[i-leo.shape[0]+size+1,j] == 255):                 logo_image_n[i,j] =  logo_image_n[i,j]            logo_image_b[i,j] =  logo_image_b[i,j]        else:            logo_image_n[i,j] = resize_image_n[i-leo.shape[0]+size+1,j]            logo_image_b[i,j] = resize_image_b[i-leo.shape[0]+size+1,j]                        cv2.imwrite('part1(c_n).png', logo_image_n)   cv2.imwrite('part1(c_b).png', logo_image_b)   plt.figure(figsize=(10, 5))plt.suptitle("M, N = 1024, 768", fontsize=16)plt.subplot(1, 2, 1)plt.imshow(logo_image_n,cmap='gray')plt.title("Nearest Neighbor")plt.axis('on')  # Hide the axesplt.subplot(1, 2, 2)plt.imshow(logo_image_b, cmap='gray')plt.title("Bilinear Interpolation")plt.axis('on')  # Hide the axesplt.savefig('Part1_Logo_Placement.png')plt.show()